import glob
import subprocess
import sys
import shlex
import pydot

from constants import FACTS_ROOT, CLUSTERS_ROOT, time_print

def cluster_match(project_name: str, previous_version: str, current_version: str):
  """
  Run ClusterMatcher on two versions of a given project.

  Parameters:
    - project_name: The name of the project to run ClusterMatcher on.
    - previous_version: The previous version of the project.
    - current_version: The current version of the project.
  """
  command = f"java -cp ARCADE_Core.jar edu.usc.softarch.arcade.clustering.ClusterMatcher mode=full arch1={CLUSTERS_ROOT}/{project_name}/arc/{previous_version} arch2={CLUSTERS_ROOT}/{project_name}/arc/{current_version}"
  subprocess.run(shlex.split(command))

  command = f"java -cp ARCADE_Core.jar edu.usc.softarch.arcade.clustering.ClusterMatcher mode=full arch1={CLUSTERS_ROOT}/{project_name}/limbo/{previous_version} arch2={CLUSTERS_ROOT}/{project_name}/limbo/{current_version}"
  subprocess.run(shlex.split(command))

def generate_arch_image(project_name: str, project_version: str, algorithm: str, sim_measure: str):
  dot_path = f"{CLUSTERS_ROOT}/{project_name}/{algorithm}/{project_version}/{project_name}-{project_version}_{sim_measure}.dot"
  svg_path = f"{CLUSTERS_ROOT}/{project_name}/{algorithm}/{project_version}/{project_name}-{project_version}_{sim_measure}.svg"
  dots = pydot.graph_from_dot_file(dot_path)
  dots[0].write_svg(svg_path)

def generate_images_files(project_name: str, project_version: str, algorithm: str, measure: str):
  """
  Generates .svg and .png files for clusters generated by the specified clustering algorithm.

  Parameters:
    - project_name (str): The name of the project.
    - project_version (str): The version of the project.
    - algorithm (str): The name of the clustering algorithm used to generate the clusters.
  """
  time_print(f"Generating images for the {algorithm} clusters of {project_name}-{project_version}.")
  generate_arch_image(project_name, project_version, algorithm, measure)
  for entry in glob.glob(f"{CLUSTERS_ROOT}/{project_name}/{algorithm}/{project_version}/{project_name}-{project_version}_{measure}_clusterDots/*.dot"):
    file_aux = entry[:-4]
    svg_file = f"{file_aux}.svg"

    dots = pydot.graph_from_dot_file(entry)
    dots[0].write_svg(svg_file)

def run_cluster_matcher(project_name: str):
  """
  Run ClusterMatcher on a given project. This will ensure all results from Limbo and ARC have the same cluster numbers for each semantic cluster.

  Parameters:
    - project_name (str): The name of the project to run ClusterMatcher on.
  """
  project_root = f"{FACTS_ROOT}/{project_name}"

  # Run ClusterMatcher for ARC and Limbo
  previous_version = "none"
  for entry in glob.glob(f"{project_root}/{project_name}-*"):
    prefix = f"{project_root}/{project_name}-"
    version = entry[len(prefix):]
    version = version.replace("_deps.rsf", "")

    if previous_version == "none":
      previous_version = version
      generate_images_files(project_name, previous_version, "limbo", "IL")
      generate_images_files(project_name, previous_version, "arc", "JS")
    else:
      current_version = version
      time_print(f"Cluster matching {project_name}-{previous_version} to {current_version}.")
      cluster_match(project_name, previous_version, current_version)
      generate_images_files(project_name, current_version, "limbo", "IL")
      generate_images_files(project_name, current_version, "arc", "JS")
      previous_version = current_version

# more dots!
def generate_dot_files(project_name: str, project_version: str, algorithm: str):
  """
  Generates .dot files for clusters generated by the specified clustering algorithm.

  Parameters:
    - project_name (str): The name of the project.
    - project_version (str): The version of the project.
    - algorithm (str): The name of the clustering algorithm used to generate the clusters.
  """
  command_clusters = (
    f"java -cp ARCADE_Core.jar "
    f"edu.usc.softarch.arcade.clustering.RsfToDot "
    f"clusters "
    f"{FACTS_ROOT}/{project_name}/{project_name}-{project_version}_deps.rsf "
    f"{CLUSTERS_ROOT}/{project_name}/{algorithm.lower()}/{project_version}/{project_name}-{project_version}_{algorithm}_clusters.rsf "
    f"{CLUSTERS_ROOT}/{project_name}/{algorithm.lower()}/{project_version}/{project_name}-{project_version}_{algorithm}_clusterDots"
  )
  command_arch = (
    f"java -cp ARCADE_Core.jar "
    f"edu.usc.softarch.arcade.clustering.RsfToDot "
    f"arch "
    f"{FACTS_ROOT}/{project_name}/{project_name}-{project_version}_deps.rsf "
    f"{CLUSTERS_ROOT}/{project_name}/{algorithm.lower()}/{project_version}/{project_name}-{project_version}_{algorithm}_clusters.rsf "
    f"{CLUSTERS_ROOT}/{project_name}/{algorithm.lower()}/{project_version}/{project_name}-{project_version}_{algorithm}.dot"
  )
  time_print(f"Generating DOT files for the {algorithm} clusters of {project_name}-{project_version}.")
  subprocess.run(shlex.split(command_clusters))
  subprocess.run(shlex.split(command_arch))

def plot(system_name: str):
  time_print(f"Beginning plotting process for {system_name}.")
  print()
  system_root=f"{FACTS_ROOT}/{system_name}"

  time_print(f"Initiating cluster matching process.")
  run_cluster_matcher(system_name)
  print()

  for entry in glob.glob(f"{system_root}/{system_name}-*"):
    prefix = f"{system_root}/{system_name}-"
    version = entry[len(prefix):]
    version = version.replace("_deps.rsf", "")

    time_print(f"Generating remaining artifacts for version {version}.")
    generate_dot_files(system_name, version, "ACDC")
    generate_images_files(system_name, version, "acdc", "ACDC")

    generate_dot_files(system_name, version, "PKG")
    generate_images_files(system_name, version, "pkg", "PKG")

  print()
  time_print(f"Plotting for {system_name} completed.")

plot(sys.argv[1])
